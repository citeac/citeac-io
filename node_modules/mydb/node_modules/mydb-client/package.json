{
  "name": "mydb-client",
  "version": "3.4.7",
  "private": true,
  "dependencies": {
    "engine.io-client": "0.7.9",
    "superagent": "0.15.4",
    "dot-component": "0.1.0",
    "type-component": "*",
    "json-component": "*",
    "emitter-component": "*",
    "clone-component": "*",
    "mongo-query": "git+ssh://git@github.com:LearnBoost/mongo-query.git#0.4.2",
    "debug": "*"
  },
  "component": {
    "scripts": {
      "mydb/index.js": "index.js",
      "mydb/document.js": "document.js"
    }
  },
  "readme": "\n# mydb-client\n\n  MyDB client component.\n\n## Installation\n\n```\n$ component install LearnBoost/mydb-client\n```\n\n## Example\n\n```js\nvar mydb = require('mydb')('mydb.host.com');\nmydb.get('/woot/woot');\n```\n\n## API\n\n### Manager([url|options])\n\n  Connects to the [mydb-server](http://github.com/learnboost/mydb-server)\n  listening on `url`.\n  If a parameter is not supplied it will connect to `window.location`\n  Alternatively, an engine.io client options object can be supplied.\n\n### Manager#get(url)\n\n  Creates a `Document` by subscribing to the supplied `url`.\n  Supplying a `url` is optional, if a vanilla document is desired. See\n  `Document#load` below.\n\n### Document\n\n  Each document represents a subscription to a given resource URL.\n\n### Document#$manager()\n\n  Returns the associated manager.\n\n### Document#$sid()\n\n  Returns the sebscription id.\n\n### Document#$readyState()\n\n  - `unloaded`: no subscription (default when no `url` was provided)\n  - `loading`: loading a resource\n  - `loaded`: resource is loaded\n  - `unloading`: subscription is being destroyed\n\n### Document#$url()\n\n  Returns the `url` this document is loaded from / loading.\n\n### Document#load(url[, fn])\n\n  Loads a document from the given URL. If `fn` is supplied, it's passed\n  to `ready`.\n\n### Document#ready(fn)\n\n  Calls the supplied `fn` when the resource is loaded. If the resource\n  is already loaded, the function is fired on the next tick.\n\n### Document#get(key[, fn])\n\n  Returns the value of the given `key`, which can use [dot\n  notation](http://github.com/learnboost/dot).\n  It throws if the document is not loaded.\n  If `fn` is supplied, `ready` is called first, and the value is passed\n  to the callback.\n\n### Document#on(key[, op], fn)\n\n  Subscribes to changes for the given `key`.\n\n  - If no operator is supplied, `fn` gets called upon _any operation_.\n  - Operations that don't change the document are ignored by\n    [mongo-query](http://github.com/learnboost/mongo-query).\n  - If an operation is supplied as the second parameter, the\n    first parameter of the event callback will be the `value` property\n    of the `log` object. For example, if the operation is a `$push`, the\n    value that's pushed is the first parameter.\n  - Otherwise, the first parameter is always the new value of the given\n    key (`after`). For example, if the operation is acting on an array,\n    like pushing, pulling or popping, you will still get the reference\n    to the entire array.\n  - The second parameter of the event callback is always the `log` object\n    returned by mongo-query.\n\n### Document#upon(key, fn)\n\n  Calls `ready`, then calls `fn` with the initial value of the given\n  `key`, and subscribes to subsequent change events for `key`.\n\n### Document#each(key, fn)\n\n  Calls `ready`, then calls `fn` for each value of the array found under\n  `key`.\n\n### Document#destroy(fn)\n\n  Destroys this subscription. `fn` gets called when the unsubscription\n  for the current id is confirmed.\n",
  "readmeFilename": "README.md",
  "description": "MyDB client component.",
  "_id": "mydb-client@3.4.7",
  "_shasum": "5b17a9fbe59aa002a61fcbef9225b0f165209b3c",
  "_resolved": "git+ssh://git@github.com:LearnBoost/mydb-client.git#41ddcda0040c50edf845cc1dbadeaf4c6ae8593e",
  "_from": "mydb-client@git+ssh://git@github.com:LearnBoost/mydb-client.git#3.4.7"
}
